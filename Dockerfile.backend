# Dockerfile para el Backend Django

# Usar una imagen base de Python
FROM python:3.12-slim-bullseye

# Establecer el directorio de trabajo dentro del contenedor
WORKDIR /app

# Copiar el archivo de requisitos e instalar las dependencias
# Aunque el requirements.txt no se pudo leer, lo copiamos para que el usuario pueda actualizarlo si es necesario.
COPY requirements.txt .
RUN apt-get update && apt-get install -y libpq-dev gcc

RUN pip install --no-cache-dir -r requirements.txt

# Instalar Node.js y npm para construir el frontend
RUN apt-get update && apt-get install -y curl && \
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@latest

# Copiar todo el código de la aplicación al contenedor
COPY . .

# Instalar dependencias y construir el frontend
WORKDIR /app/frontend
RUN npm install && npm run build

# Volver al directorio del backend
WORKDIR /app

# Exponer el puerto en el que Gunicorn escuchará
EXPOSE 8000

# Comando para ejecutar la aplicación Django con Gunicorn
# Asegúrate de que 'libreando.wsgi' sea la ruta correcta a tu archivo WSGI
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "libreando.wsgi"]
